// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.AccessPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleID");

                    b.Property<int>("ViewControlID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("ViewControlID");

                    b.ToTable("AccessPermission");
                });

            modelBuilder.Entity("Data.Models.ActionControl", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("ViewControlID");

                    b.HasKey("ID");

                    b.ToTable("ActionControl");
                });

            modelBuilder.Entity("Data.Models.ActionPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionControlID");

                    b.Property<int>("ActionID");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleID");

                    b.Property<int>("ViewControlID");

                    b.HasKey("ID");

                    b.HasIndex("ActionControlID");

                    b.HasIndex("RoleID");

                    b.HasIndex("ViewControlID");

                    b.ToTable("ActionPermission");
                });

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int?>("AppointmentStatusID");

                    b.Property<bool?>("ByDoctor");

                    b.Property<DateTime?>("Date");

                    b.Property<int?>("DepartmentID");

                    b.Property<int?>("DoctorID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PurposeID");

                    b.Property<int?>("RoomID");

                    b.Property<bool?>("SelfAppointment");

                    b.Property<int?>("SpecialityID");

                    b.Property<DateTime?>("StartDate");

                    b.Property<DateTime?>("Time");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Data.Models.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentPath");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("Data.Models.Bed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int?>("BedNumber");

                    b.Property<int?>("BuildingID");

                    b.Property<int?>("DepartmentID");

                    b.Property<int?>("FloorID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("Isolated");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RoomID");

                    b.Property<int>("StatusID");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("FloorID");

                    b.HasIndex("RoomID");

                    b.HasIndex("StatusID");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("Data.Models.BedAllocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<DateTime>("AllocatedDate");

                    b.Property<int?>("BedID");

                    b.Property<DateTime>("DepartureDate");

                    b.Property<int?>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("StatusID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BedID")
                        .IsUnique()
                        .HasFilter("[BedID] IS NOT NULL");

                    b.ToTable("BedAllocation");
                });

            modelBuilder.Entity("Data.Models.Branch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Data.Models.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("Data.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Data.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Data.Models.Floor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("Data.Models.LogData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName");

                    b.Property<int>("LogTableID");

                    b.Property<string>("NewData");

                    b.Property<string>("OldData");

                    b.HasKey("ID");

                    b.ToTable("LogData");
                });

            modelBuilder.Entity("Data.Models.LogTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Operation");

                    b.Property<string>("TableName");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("LogTable");
                });

            modelBuilder.Entity("Data.Models.Lookup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.Property<int>("TypeID");

                    b.HasKey("ID");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("Data.Models.MedicalHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int?>("AdmissionTypeID");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastVisit");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PatientTypeID");

                    b.Property<int?>("PayTypeID");

                    b.HasKey("ID");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("Data.Models.PatientAdmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<int?>("AdmissionID");

                    b.Property<int?>("AdmissionTypeID");

                    b.Property<int?>("AppointmentID");

                    b.Property<int?>("BedID");

                    b.Property<int?>("BuildingID");

                    b.Property<int?>("DepartmentID");

                    b.Property<int?>("ElectiveID");

                    b.Property<int?>("FloorID");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PurposeID");

                    b.Property<int?>("ReservedBy");

                    b.Property<int?>("RoomID");

                    b.Property<int?>("TypeID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.ToTable("PatientAdmission");
                });

            modelBuilder.Entity("Data.Models.PatientPersonalInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdmissionID");

                    b.Property<int?>("BloodGroupID");

                    b.Property<int?>("CityID");

                    b.Property<int?>("CountryID");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("GenderID");

                    b.Property<bool>("HaveInsurance");

                    b.Property<int?>("IdentificationID");

                    b.Property<string>("IdentificationTypeID");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<int?>("RegistrationNo");

                    b.Property<int?>("ReligionID");

                    b.Property<int?>("ReservedID");

                    b.Property<int?>("SocialStatusID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("PatientPersonalInformation");
                });

            modelBuilder.Entity("Data.Models.PatientRelative", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Address");

                    b.Property<string>("Comment");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("RelationID");

                    b.Property<string>("RelativeName");

                    b.Property<bool>("SameAddress");

                    b.Property<int?>("StatusID");

                    b.Property<string>("Telephone");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PatientRelative");
                });

            modelBuilder.Entity("Data.Models.PersonalInformation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchID");

                    b.Property<int?>("CityID");

                    b.Property<int?>("CountryID");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime?>("DateOfEndContract");

                    b.Property<DateTime?>("DateOfEndJob");

                    b.Property<DateTime?>("DateOfHiring");

                    b.Property<DateTime?>("DateOfStartJob");

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("EducationLevel");

                    b.Property<int?>("EmploymentClassID");

                    b.Property<int?>("EmploymentTypeID");

                    b.Property<int?>("GenderID");

                    b.Property<int?>("IdentificationID");

                    b.Property<string>("IdentificationTypeID");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<int?>("PositionID");

                    b.Property<int>("ProbationPeriod");

                    b.Property<DateTime?>("ProbationTime");

                    b.Property<int?>("PurposeID");

                    b.Property<int?>("ReligionID");

                    b.Property<int?>("ReservedID");

                    b.Property<int?>("ResponsibleOfficerID");

                    b.Property<int?>("SocialStatusID");

                    b.Property<int?>("SpecialityID");

                    b.Property<int?>("SubDepartmentID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("EmploymentClassID");

                    b.HasIndex("EmploymentTypeID");

                    b.HasIndex("PositionID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("PersonalInformation");
                });

            modelBuilder.Entity("Data.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Data.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FloorID");

                    b.Property<string>("Name");

                    b.Property<int>("RoomNumber");

                    b.HasKey("ID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime?>("AddedDate");

                    b.Property<string>("Address");

                    b.Property<string>("ArFamilyName");

                    b.Property<string>("ArFirstName");

                    b.Property<string>("ArSecondName");

                    b.Property<string>("ArThirdName");

                    b.Property<string>("ComputerName");

                    b.Property<string>("Email");

                    b.Property<string>("EnFamilyName");

                    b.Property<string>("EnFirstName");

                    b.Property<string>("EnSecondName");

                    b.Property<string>("EnThirdName");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<string>("Fax");

                    b.Property<string>("IPAddress");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Mobile");

                    b.Property<string>("Mobile2");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Note");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleID");

                    b.Property<int?>("SecurityGroupID");

                    b.Property<string>("SignaturePath");

                    b.Property<int?>("StatusID");

                    b.Property<string>("Telephone");

                    b.Property<string>("Telephone2");

                    b.Property<int?>("TitleID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("StatusID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.Models.ViewControl", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Uri");

                    b.HasKey("ID");

                    b.ToTable("ViewControl");
                });

            modelBuilder.Entity("Data.Models.AccessPermission", b =>
                {
                    b.HasOne("Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Models.ViewControl", "ViewControl")
                        .WithMany("AccessPermission")
                        .HasForeignKey("ViewControlID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Models.ActionPermission", b =>
                {
                    b.HasOne("Data.Models.ActionControl", "ActionControl")
                        .WithMany()
                        .HasForeignKey("ActionControlID");

                    b.HasOne("Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Models.ViewControl", "ViewControl")
                        .WithMany()
                        .HasForeignKey("ViewControlID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Models.Appointment", b =>
                {
                    b.HasOne("Data.Models.Lookup", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Data.Models.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID");

                    b.HasOne("Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Data.Models.Bed", b =>
                {
                    b.HasOne("Data.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingID");

                    b.HasOne("Data.Models.Lookup", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Data.Models.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorID");

                    b.HasOne("Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.HasOne("Data.Models.Lookup", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Models.BedAllocation", b =>
                {
                    b.HasOne("Data.Models.Bed")
                        .WithOne("BedAllocation")
                        .HasForeignKey("Data.Models.BedAllocation", "BedID");
                });

            modelBuilder.Entity("Data.Models.PatientPersonalInformation", b =>
                {
                    b.HasOne("Data.Models.Lookup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupID");

                    b.HasOne("Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.HasOne("Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Data.Models.User")
                        .WithOne("PatientPersonalInformation")
                        .HasForeignKey("Data.Models.PatientPersonalInformation", "UserID");
                });

            modelBuilder.Entity("Data.Models.PatientRelative", b =>
                {
                    b.HasOne("Data.Models.User")
                        .WithMany("PatientRelative")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Data.Models.PersonalInformation", b =>
                {
                    b.HasOne("Data.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");

                    b.HasOne("Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.HasOne("Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Data.Models.Lookup", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("Data.Models.Lookup", "EmploymentClass")
                        .WithMany()
                        .HasForeignKey("EmploymentClassID");

                    b.HasOne("Data.Models.Lookup", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeID");

                    b.HasOne("Data.Models.Lookup", "Position")
                        .WithMany()
                        .HasForeignKey("PositionID");

                    b.HasOne("Data.Models.User")
                        .WithOne("PersonalInformation")
                        .HasForeignKey("Data.Models.PersonalInformation", "UserID");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.HasOne("Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("Data.Models.Lookup", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID");
                });
#pragma warning restore 612, 618
        }
    }
}
